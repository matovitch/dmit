ROOT = $(TUP_CWD)
VARIANT = $(TUP_VARIANTDIR)

##############
# CPP TO OBJ #
##############

CX = clang++

CXFLAGS += -std=c++20
CXFLAGS += -Wall
CXFLAGS += -fno-rtti

ifeq (@(IS_DEBUG),y)
    CXFLAGS += -g -fno-omit-frame-pointer -fdebug-default-version=4
endif

ifeq (@(IS_USING_ASSERT),y)
    CXFLAGS += -DDMIT_USE_ASSERT
endif

ifeq (@(IS_USING_OPTION_REFERENCE),y)
    CXFLAGS += -DDMIT_USE_OPTION_REFERENCE
endif

ifeq (@(IS_USING_VALGRIND),y)
    CXFLAGS += -DSCHMIT_USE_VALGRIND
endif

ifeq (@(O_LEVEL),0)
    CXFLAGS += -O0
endif
ifeq (@(O_LEVEL),1)
    CXFLAGS += -O1
endif
ifeq (@(O_LEVEL),2)
    CXFLAGS += -O2
endif
ifeq (@(O_LEVEL),3)
    CXFLAGS += -O3
endif

ifeq (@(IS_ASAN),y)
    CXFLAGS += -DSCHMIT_USE_ASAN
    CXFLAGS += -fsanitize=address
endif

ifeq (@(IS_TSAN),y)
    CXFLAGS += -DSCHMIT_USE_TSAN
    CXFLAGS += -fsanitize=thread
endif

ifeq (@(IS_UBSAN),y)
    CXFLAGS += -fsanitize=undefined
endif

#CXFLAGS += -fexperimental-isel

CXFLAGS += -I $(ROOT)/lib/include

!cx = |> ^j^ $(CX) $(CXFLAGS) -c %f -o %o |>

##############
# OBJ TO ELF #
##############

CL = $(CX)

CLFLAGS += -fuse-ld=lld

ifeq (@(IS_ASAN),y)
    CLFLAGS += -fsanitize=address
endif

ifeq (@(IS_TSAN),y)
    CLFLAGS += -fsanitize=thread
endif

ifeq (@(IS_UBSAN),y)
    CLFLAGS += -fsanitize=undefined
endif

ifeq (@(IS_STATIC),y)
    CLFLAGS += -static-libstdc++ -static-libgcc
endif
